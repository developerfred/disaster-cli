name: Release to Production

on:
  push:
    branches-ignore: [ master ]

jobs:

  darwin-386:
    name: darwin-386
    runs-on: ubuntu-latest
    env:
      GOARCH: "386"
      GOOS: "darwin"
    steps:
      -
        id: go
        name: "Set up Go 1.14"
        uses: actions/setup-go@v1
        with:
          go-version: 1.14
      -
        name: "Check out code into the Go module directory"
        uses: actions/checkout@v2
      -
        name: "Get dependencies"
        run: |
            go get -v -t -d ./...
            if [ -f Gopkg.toml ]; then
                curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
                dep ensure
            fi
      -
        name: create
        run: "go build -o disaster-$GOOS-$GOARCH -v"
      - uses: actions/upload-artifact@v1
        with:
          name: disaster-$GOOS-$GOARCH
          path: disaster-$GOOS-$GOARCH

  darwin-amd64:
    name: darwin-amd64
    runs-on: ubuntu-latest
    steps:
      -
        env:
          GOARCH: amd64
          GOOS: darwin
        id: go
        name: "Set up Go 1.14"
        uses: actions/setup-go@v1
        with:
          go-version: 1.14
      -
        name: "Check out code into the Go module directory"
        uses: actions/checkout@v2
      -
        name: "Get dependencies"
        run: |
            go get -v -t -d ./...
            if [ -f Gopkg.toml ]; then
                curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
                dep ensure
            fi
      -
        name: create
        run: "go build -o disaster-$GOOS-$GOARCH -v"
      - uses: actions/upload-artifact@v1
        with:
          name: disaster-$GOOS-$GOARCH
          path: disaster-$GOOS-$GOARCH

  linux-386:
    name: linux-386
    runs-on: ubuntu-latest
    steps:
      -
        env:
          GOARCH: "386"
          GOOS: linux
        id: go
        name: "Set up Go 1.14"
        uses: actions/setup-go@v1
        with:
          go-version: 1.14
      -
        name: "Check out code into the Go module directory"
        uses: actions/checkout@v2
      -
        name: "Get dependencies"
        run: |
            go get -v -t -d ./...
            if [ -f Gopkg.toml ]; then
                curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
                dep ensure
            fi
      -
        name: create
        run: "go build -o disaster-$GOOS-$GOARCH -v"
      - uses: actions/upload-artifact@v1
        with:
          name: disaster-$GOOS-$GOARCH
          path: disaster-$GOOS-$GOARCH

  linux-amd64:
    name: linux-amd64
    runs-on: ubuntu-latest
    steps:
      -
        env:
          GOARCH: amd64
          GOOS: linux
        id: go
        name: "Set up Go 1.14"
        uses: actions/setup-go@v1
        with:
          go-version: 1.14
      -
        name: "Check out code into the Go module directory"
        uses: actions/checkout@v2
      -
        name: "Get dependencies"
        run: |
            go get -v -t -d ./...
            if [ -f Gopkg.toml ]; then
                curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
                dep ensure
            fi
      -
        name: create
        run: "go build -o disaster-$GOOS-$GOARCH -v"
      - uses: actions/upload-artifact@v1
        with:
          name: disaster-$GOOS-$GOARCH
          path: disaster-$GOOS-$GOARCH

  windows-386:
    name: windows-386
    runs-on: ubuntu-latest
    steps:
      -
        env:
          GOARCH: "386"
          GOOS: windows
        id: go
        name: "Set up Go 1.14"
        uses: actions/setup-go@v1
        with:
          go-version: 1.14
      -
        name: "Check out code into the Go module directory"
        uses: actions/checkout@v2
      -
        name: "Get dependencies"
        run: |
            go get -v -t -d ./...
            if [ -f Gopkg.toml ]; then
                curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
                dep ensure
            fi
      -
        name: create
        run: "go build -o disaster-$GOOS-$GOARCH -v"
      - uses: actions/upload-artifact@v1
        with:
          name: disaster-$GOOS-$GOARCH
          path: disaster-$GOOS-$GOARCH

  windows-amd64:
    name: windows-amd64
    runs-on: ubuntu-latest
    steps:
      -
        env:
          GOARCH: amd64
          GOOS: windows
        id: go
        name: "Set up Go 1.14"
        uses: actions/setup-go@v1
        with:
          go-version: 1.14
      -
        name: "Check out code into the Go module directory"
        uses: actions/checkout@v2
      -
        name: "Get dependencies"
        run: |
            go get -v -t -d ./...
            if [ -f Gopkg.toml ]; then
                curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
                dep ensure
            fi
      -
        name: create
        run: "go build -o disaster-$GOOS-$GOARCH -v"
      - uses: actions/upload-artifact@v1
        with:
          name: disaster-$GOOS-$GOARCH
          path: disaster-$GOOS-$GOARCH

  release:
    name: "Create a release"
    needs: ["darwin-386", "darwin-amd64", "linux-386", "linux-amd64", "windows-386", "windows-amd64"]
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - uses: actions/download-artifact@v1
        with:
          name: disaster-**      

      - name: "release"
        run: npx semantic-release
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN}}"
